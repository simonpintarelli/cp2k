################# ARCHITECTURE FILE ##################
# === For Cray XC50 (PizDaint GPU-partition) ====
# Program environments:
#
# module load daint-gpu
# module unload PrgEnv-cray
# module load PrgEnv-gnu/6.0.4
# module load fftw/3.3.4.10
# module load cudatoolkit/8.0.61_2.4.3-6.0.4.0_3.1__gb475d12
#
# === LIBRARIES and MODULES ===
# Please make your choice for precompiled libraries.
# - all others - take the nightly mirror:
BDIR     = /project/csstaff/alicej/
# === CONFIGURE TO YOUR NEEDS (1 = true, 0 = false) ===
USE_DBCSR_CUDA = 1
USE_FFT_CUDA   = 1
# ===========================================
# === DO not change anything from here on ===
# ===========================================
USE_CUDA = 0
ifeq (1,$(USE_DBCSR_CUDA))
  USE_CUDA = 1
  DFLAGS  += -D__ACC -D__DBCSR_ACC
endif
ifeq (1,$(USE_FFT_CUDA))
  USE_CUDA = 1
  LIBS    += -lcudart -lcublas -lcufft -lrt
  DFLAGS  += -D__PW_CUDA
endif

LDIR     = $(BDIR)/CP2K_ENVIRONMENT/DAINT/libs/PrgEnv-gnu/6.0.8_daint-gpu
LIBS    += -L$(LDIR)/libelpa/2019.05.002_gpu/lib -lelpa_openmp
LIBS    += -L$(LDIR)/libxsmm/1.14.0/lib -lxsmmf -lxsmm -ldl
LIBS    += -L$(LDIR)/libxc/4.3.4/lib -lxcf03 -lxc
LIBS    += -L$(LDIR)/libint/2.6.0/lib -lint2 -lstdc++
LIBS    += -L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_gnu_thread -lmkl_core -lmkl_blacs_intelmpi_lp64 -lgomp -lpthread -lm

INCS     = -I$(LDIR)/libelpa/2019.05.002_gpu/include/elpa_openmp-2019.05.002/modules
INCS    += -I$(LDIR)/libelpa/2019.05.002_gpu/include/elpa_openmp-2019.05.002/elpa
INCS    += -I$(LDIR)/libxsmm/1.14.0/include
INCS    += -I$(LDIR)/libxc/4.3.4/include
INCS    += -I$(LDIR)/libint/2.6.0/include
INCS    += -I$(COSMA_PATH)/include
INCS    += -I${MKLROOT}/include

# === PRE-PROCESSOR FLAGS ===
DFLAGS  += -D__parallel -D__SCALAPACK -D__ELPA=201705 \
           -D__MPI_VERSION=3 \
           -D__FFTW3 \
           -D__LIBXSMM \
           -D__LIBXC \
           -D__LIBINT -D__LIBINT_MAX_AM=7 -D__LIBDERIV_MAX_AM1=6 \
           -D__MAX_CONTR=4 \
           -D__HAS_NO_SHARED_GLIBC
# === BINARIES (COMPILER, LINKER, ...) ===
CC       = cc
CPP      =
FC       = ftn
LD       = ftn
AR       = ar -r
ifeq (1,$(USE_CUDA))
  NVCC     = nvcc
endif
# === COMPILER FLAGS ===
# detailed optimization description (for PizDaint GPU-partition!):
#   -O3                = -O2 -finline-functions -funswitch-loops -fpredictive-commoning -fgcse-after-reload -ftree-vectorize
#   -march=haswell = (set internally via module:) -msse, -msse2, -msse3, -mssse3, -msse4, -msse4.1, -msse4.2, -mavx, -mavx2
#   -mtune=haswell = (set internally via module:) [optimize for this instruction set only]
#   -funroll-loops     = unroll loops where the number of iterations is known at compiler time or on entry to the loop
#
AFLAGS   = $(DFLAGS) $(INCS) -fopenmp -O3 -funroll-loops
CPPFLAGS =
FCFLAGS  = $(AFLAGS) -ffree-form -ffree-line-length-512
CFLAGS   = $(AFLAGS)
LDFLAGS  = $(FCFLAGS)
ifeq (1,$(USE_CUDA))
  CXX      = CC
  CXXFLAGS = -O3 -std=c++11 -fopenmp
  NVFLAGS  = $(DFLAGS) -O3 -Xcompiler='-fopenmp' --std=c++11
  GPUVER   = P100
  LIBS    += -lcudart -lnvrtc
endif
############### END ARCHITECTURE FILE ################
